#include<config.h>
CPS_START_NAMESPACE
//--------------------------------------------------------------------
//  CVS keywords
//
//  $Author: zs $
//  $Date: 2004-08-18 11:57:41 $
//  $Header: /home/chulwoo/CPS/repo/CVS/cps_only/cps_pp/src/alg/alg_w_spect/w_quark.C.sav,v 1.5 2004-08-18 11:57:41 zs Exp $
//  $Id: w_quark.C.sav,v 1.5 2004-08-18 11:57:41 zs Exp $
//  $Name: not supported by cvs2svn $
//  $Locker:  $
//  $Revision: 1.5 $
//  $Source: /home/chulwoo/CPS/repo/CVS/cps_only/cps_pp/src/alg/alg_w_spect/w_quark.C.sav,v $
//  $State: Exp $
//
//--------------------------------------------------------------------

CPS_END_NAMESPACE
#include<alg/w_all.h>
CPS_START_NAMESPACE

CPS_END_NAMESPACE
#include <stdlib.h>
CPS_START_NAMESPACE

CPS_END_NAMESPACE
#include<util/gjp.h>
#include<util/error.h>
#include<util/verbose.h>
CPS_START_NAMESPACE

CPS_END_NAMESPACE
#include<util/lattice.h>
CPS_START_NAMESPACE

CPS_END_NAMESPACE
#include<comms/glb.h>
CPS_START_NAMESPACE
 
//---------------------------------------------------------------------------
// class FermionVector 
//---------------------------------------------------------------------------
class FermionVector : public WspectGinfo {

private:
  static char *d_class_name;  

  // data -- local fermionic field and its size in units of Float
  IFloat *d_fermion_p;                     
  int    d_size;  

  // not implemented
  FermionVector(const FermionVector&);
  FermionVector& operator=(const FermionVector&);

  // helper member function
  void zeroOut()  const;
      
public:
  // CTOR
  FermionVector();
  // DTOR
  ~FermionVector();

  // ACCESSORS
  Float * data(void)          const {return (Float *)d_fermion_p;}
  void    print(char *file)   const;

  // MANIPULATORS

  // Caller's responsibility:  check argument color and spin.

  void setPointSrc(int color, int spin, 
		   const int *point_global_coord) const;
  // point_global_coord = 0 means the source point is off-node.

  void setSmearedSrc(int color, int spin, 
		     const IFloat *src_matrix,
		     int          src_plane_dir,
		     const int *  src_local_origin = 0,
		     const int *  src_local_end = 0) const;
  // src_matrix = 0 means the source region is entirely off-node:
  //         the routine simply zero out the FermionVector.
};


//---------------------------------------------------------------------------
// static data members
//---------------------------------------------------------------------------
char * FermionVector::d_class_name = "FermionVector";
char *   WspectQuark::d_class_name = "WspectQuark";
int      WspectQuark::d_weight_Dy;
int      WspectQuark::d_weight_Cy;


//---------------------------------------------------------------------------
// WspectQuark::WspectQuark(...)
//--------------------------------------------------------------------------- 
WspectQuark::WspectQuark(Lattice &     lat, 
			 char *        outfile,
			 char *        pbp_outfile,
			 char *        mid_point_outfile,
			 char *        a0_p_outfile,
			 WspectArg &   warg,
			 const WspectHyperRectangle & whr)
  : d_size(GJP.VolNodeSites() * (COLORs*COLORs*DIRACs*DIRACs*COMPLEXs))
{
  VRB.Func(d_class_name, ctor_str);


  // set d_weight_* to speed up the accesses to quark propagators
  //-------------------------------------------------------------------------
  {    
    d_weight_Cy = lcl_sites[0]*lcl_sites[1]*lcl_sites[2]*lcl_sites[3]
      *SPINORs;  
    d_weight_Dy = d_weight_Cy * COLORs;
  }


  // Open the file where the monitor parameters are written
  //-------------------------------------------------------------------------
  FILE *fp;
  if (outfile) {
    if (!(fp = Fopen(outfile, "a"))) {
      ERR.FileA(d_class_name, ctor_str, outfile);
    }
  }
  
  // Allocate space for the quark propagator
  //-------------------------------------------------------------------------
  d_data_p = (IFloat *) smalloc(d_size * sizeof(IFloat));
  if (!d_data_p) 
    ERR.Pointer(d_class_name, ctor_str, "d_data_p");
  VRB.Smalloc(d_class_name, ctor_str, 
	      "d_data_p", d_data_p, d_size * sizeof(Float));
  
  // In case of DWF, allocate space need for propagator for 
  // calculating <\Delta J^5 \bar q \gamma^5 q> using mid_point sink
  if (lat.Fclass() == F_CLASS_DWF && mid_point_outfile !=0 ) {
    d_data_mid_point = (IFloat *) smalloc(d_size * sizeof(IFloat));
    if (!d_data_mid_point) 
      ERR.Pointer(d_class_name, ctor_str, "d_data_mid_point");
    VRB.Smalloc(d_class_name, ctor_str, 
		"d_data_mid_point", d_data_mid_point, 
		d_size * sizeof(Float));
  } else {
    d_data_mid_point = 0;
  }

  // Initial guesses -- doesn't want it to be a zero mode
  //-------------------------------------------------------------------------
  {

    /* Old code
    for (int i = 0; i < d_size; ) {
      d_data_p[i++] = 1.;
      d_data_p[i++] = 0.;
      d_data_p[i++] = .5;
      d_data_p[i++] = 0.;
    }
    */

    // On Sept. 16th, change the initial guess to be same as the source
    // zero out the initial guess first

    for (int i = 0; i < d_size; i++ )  d_data_p[i] = 0.;
  }

  // For POINT_W only:
  //-------------------------------------------------------------------------
  const int *point = 0;     int src_point[LORENTZs];  
  if (whr.onNode()) {
    for (int l = 0; l < LORENTZs; ++l) {
      src_point[l] = 0;
    }
    src_point[whr.dir()] = whr.glbCoord();
    if (glb2lcl(src_point, src_point)) {    
      point = src_point;                 // if the point is on-node.
    }
  }
   
  // For WALL_W and BOX_W only:  
  //-------------------------------------------------------------------------
  const IFloat *src_matrix      = 0;
  const int   *src_lower_bound = whr.lclMin(); 
  const int   *src_upper_bound = whr.lclMax(); 
  int          prop_dir        = whr.dir();  

  // Sept. 21st:
  // Modified the code according to Chris Dawson's suggestion

  if ( (warg.source_kind == WALL_W) || (warg.source_kind == BOX_W) ) {
    if (whr.onNode()) {
      src_matrix = (const IFloat *)((lat.FixGaugePtr())[whr.lclCoord()]);  
    }
  }
  
  // For BOX_W only:             lower_bound, upper_bound
  //     shift origin and end of box source to aots time slice
  //-------------------------------------------------------------------------
  int src_low[LORENTZs]; 
  int src_upp[LORENTZs];

  if (whr.onNode() && warg.source_kind == BOX_W) {

    glb2lcl(src_low, warg.src_box_b);
    glb2lcl(src_upp, warg.src_box_e);

    src_low[prop_dir] = src_upp[prop_dir] = whr.lclCoord();

    int l;
    
    // check whether the source is valid [a point, at least]
    int src_dimension = 0;      
    for (l = 0; l < LORENTZs; ++l) {
      if (src_low[l] > src_upp[l])  
	ERR.General(d_class_name, ctor_str, "%s", inconsistent_str);
      if (src_low[l] < src_upp[l])  
	++src_dimension;
    }
    if (src_dimension < 1 || prop_dir != warg.prop_dir) {
      ERR.General(d_class_name, ctor_str, "%s", inconsistent_str);
    }

    // find out the on-node part of the source
    for (l = 0; l < LORENTZs; ++l) {
      // src_matrix = 0 if off-node
      if (src_low[l] > src_upper_bound[l] || src_upp[l] < src_lower_bound[l])
	src_matrix = 0;
      
      if (src_low[l] < src_lower_bound[l])  src_low[l] = src_lower_bound[l];
      if (src_upp[l] > src_upper_bound[l])  src_upp[l] = src_upper_bound[l];
    }

    // redirect the pointers 
    src_lower_bound = src_low;
    src_upper_bound = src_upp;
  }
  


  // d_source_center[LORENTZs]
  //-------------------------------------------------------------------------
  switch (warg.source_kind) {
  case POINT_W:
    { 
      for (int l = 0; l < LORENTZs; ++l) 
	d_source_center[l] = 0; 
      break; 
    }
  case BOX_W:
    { 
      for (int l = 0; l < LORENTZs; ++l) 
	d_source_center[l] = (warg.src_box_b[l] + warg.src_box_e[l])/2; 
      break; 
    }
  case WALL_W:
    { 
      for (int l = 0; l < LORENTZs; ++l) 
	d_source_center[l] = glb_sites[l]/2; 
      break;
    }
  }

  Float pbp_norm;
  Float pbp = 0. ;
  Float pbg5p = 0. ;
  
  // Allocate memory for gamma5 * solution
  //-------------------------------------------------------------------------
  
  int f_size = GJP.VolNodeSites() * SPINORs;
  
  Vector *sol_g5 = 0;
  if ( (warg.source_kind==POINT_W) && pbp_outfile ) {
    sol_g5 = (Vector *) smalloc(f_size * sizeof(Float));

    if(sol_g5 == 0) 
      ERR.Pointer(d_class_name, ctor_str, "sol_g5");
    VRB.Smalloc(d_class_name, ctor_str, "sol_g5", sol_g5,
		f_size * sizeof(Float));
  }

  // Calulate pbp normalization factor 
  //-------------------------------------------------------------------------
  
  if ((lat.Fclass() == F_CLASS_WILSON) || 
      (lat.Fclass() == F_CLASS_CLOVER)) {
    pbp_norm = (4.0 + warg.cg.mass) * COLORs * DIRACs;
  }
  else if (lat.Fclass() == F_CLASS_DWF) {
    pbp_norm = (4.0 + GJP.DwfA5Inv() - GJP.DwfHeight()) * COLORs * DIRACs;
  }
  else {
    ERR.General(d_class_name, ctor_str, wrong_type_str);
  }
  
  // Set the source and call CG  [COLORs x DIRACs] times
  // Caculate pbp and pbg5p at the same time
  //-------------------------------------------------------------------------
  FermionVector source;

  // For <A_0 P> calculation -- only used for DWF
  WspectAxialCurrent axialCurrent(lat, whr, a0_p_outfile);

  for (int Cy = 0; Cy < COLORs; ++Cy) {                 // source color
    for (int Dy = 0; Dy < DIRACs; ++Dy) {               // source dirac

      // Set source and the initial guess
      //---------------------------------------------------------------------
      if (warg.source_kind == POINT_W) {                // POINT_W
        source.setPointSrc(Cy, Dy, point);
	
	// Set the initial guess for the solution the same as the source
	if (point) {
	  * (d_data_p+f_size*(Cy+COLORs*Dy)+              // solution location
	   COMPLEXs*(Cy+COLORs*(Dy+DIRACs*siteOffset(point)))) = 1.0 ; 
	}
	
      } else {  	                                // WALL_W, BOX_W
        source.setSmearedSrc(Cy, Dy, src_matrix, prop_dir,
			     src_lower_bound, src_upper_bound);

	// Set the initial guess for the solution the same as the source
	// Code copied from setSmearScr()
	if (src_matrix) {
	  // -- walk in 3D -- Note: lclMin[L] = lclMax[L] = lclW
	  //-----------------------------------------------------------------
	  int lcl[LORENTZs];                          // local lattice site
	  for (lcl[0] = src_lower_bound[0]; 
	       lcl[0] <= src_upper_bound[0]; lcl[0]++)
	  for (lcl[1] = src_lower_bound[1]; 
	       lcl[1] <= src_upper_bound[1]; lcl[1]++)
	  for (lcl[2] = src_lower_bound[2]; 
	       lcl[2] <= src_upper_bound[2]; lcl[2]++) 
	  for (lcl[3] = src_lower_bound[3]; 
	       lcl[3] <= src_upper_bound[3]; lcl[3]++)
	    for (int c = 0; c < COLORs; c++) {
	      int frm_offset = 
		COMPLEXs*(c+COLORs*(Dy+DIRACs*siteOffset(lcl)));
	      int gau_offset = COMPLEXs*(c+COLORs*(Cy+COLORs*
				     siteOffset(lcl, prop_dir)));
	      IFloat *sol_ptr = d_data_p+f_size*(Cy+COLORs*Dy);
	      
	      sol_ptr[frm_offset++] =  src_matrix[gau_offset++];    // real
	      sol_ptr[frm_offset]   = -src_matrix[gau_offset];      // imag
	    }
	}

      }

      // Do inversion
      //---------------------------------------------------------------------

      int          cg_iter;          // num of iter it took CG to converge
      Float        true_res;

      if (lat.Fclass() == F_CLASS_DWF) {
        int ls = GJP.SnodeSites();
        int ls_glb = GJP.SnodeSites() * GJP.Snodes();
        int f_size_5d = f_size * ls;
        Vector *src_4d = (Vector *)source.data();
        Vector *sol_4d = (Vector *)(d_data_p+f_size*(Cy+COLORs*Dy));	

	Vector *sol_4d_mid_point = 0;
	if (mid_point_outfile != 0)
	  sol_4d_mid_point = 
	    (Vector *)(d_data_mid_point+f_size*(Cy+COLORs*Dy));

        Vector *src_5d = (Vector *) smalloc(f_size_5d * sizeof(IFloat));
        if(src_5d == 0)
          ERR.Pointer(d_class_name,ctor_str, "src_5d");
        VRB.Smalloc(d_class_name,ctor_str, "src_5d", src_5d,
                    f_size_5d * sizeof(IFloat));

        Vector *sol_5d = (Vector *) smalloc(f_size_5d * sizeof(IFloat));
        if(sol_5d == 0)
          ERR.Pointer(d_class_name,ctor_str, "sol_5d");
        VRB.Smalloc(d_class_name,ctor_str, "sol_5d", sol_5d,
                    f_size_5d * sizeof(IFloat));

        lat.Ffour2five(src_5d, src_4d, 0, ls_glb-1);
        lat.Ffour2five(sol_5d, sol_4d, ls_glb-1, 0);

        cg_iter = lat.FmatInv(sol_5d, src_5d, &(warg.cg), &true_res);
	
	// Calculate <A_0 P> correlators for DWF lattice
	if (a0_p_outfile != 0)
	  axialCurrent.measureAll(sol_5d);

        lat.Ffive2four(sol_4d, sol_5d, ls_glb-1, 0);

	if (mid_point_outfile != 0) 
	  lat.Ffive2four(sol_4d_mid_point, sol_5d, ls_glb/2-1, ls_glb/2);

        VRB.Sfree(d_class_name,ctor_str, "sol_5d", sol_5d);
        sfree(sol_5d);
        VRB.Sfree(d_class_name,ctor_str, "src_5d", src_5d);
        sfree(src_5d);

      }
      else {
        cg_iter = lat.FmatInv((Vector *)(d_data_p+
					 f_size*(Cy+COLORs*Dy)), 
			      (Vector *)source.data(), 
			      &(warg.cg), &true_res);
      }

      // Print out number of iterations and true residual.
      //---------------------------------------------------------------------
      VRB.Result(d_class_name,ctor_str,"CG iterations = %d %e\n",
		 cg_iter, IFloat(true_res));
      fprintf(fp, "%d %e\n", cg_iter, IFloat(true_res));

      if ( (warg.source_kind==POINT_W) && pbp_outfile ) {
	// Calculate pbp 
	pbp += ((Vector *)(d_data_p+f_size*(Cy+COLORs*Dy))) -> 
	  ReDotProductGlbSum((Vector *) source.data(), f_size);
      
	// Calculate pbg5p = Tr[ PsiBar * Gamma5 * Psi ]
	
	lat.Gamma5(sol_g5, (Vector *)(d_data_p+f_size*(Cy+COLORs*Dy)), 
		   GJP.VolNodeSites());
	pbg5p += sol_g5->ReDotProductGlbSum((Vector *) source.data(), f_size);
      }
    }
  }
  
  if ( (warg.source_kind==POINT_W) && pbp_outfile ) {
    VRB.Sfree(d_class_name,ctor_str, "sol_g5", sol_g5);
    sfree(sol_g5);
  }

  // Close the file
  //-------------------------------------------------------------------------
  fclose(fp);

  if ( (warg.source_kind==POINT_W) && pbp_outfile) {
    if (!(fp = Fopen(pbp_outfile, "a"))) {
      ERR.FileA(d_class_name, ctor_str, pbp_outfile);
    }
    fprintf(fp, "%e %e %e\n", 
	    IFloat(warg.cg.mass), 
	    IFloat(pbp/pbp_norm),
	    IFloat(pbg5p/pbp_norm));
    fclose(fp);
  }

  if (lat.Fclass() == F_CLASS_DWF && a0_p_outfile != 0) {
    axialCurrent.doSum();
    axialCurrent.print();
  }

  // DEBUG -- PING
#ifdef DEBUG_W_QUARK
  dumpData("quark_prop0.dat");
#endif
}


//---------------------------------------------------------------------------
// void WspectQuark::dumpData() const 
//--------------------------------------------------------------------------- 
void
WspectQuark::dumpData(char *filename) const {

  FILE *fp;
  
  if (filename && (fp = Fopen(filename, "a"))) {
    for (int i = 0; i < d_size; ++i)
      fprintf(fp, "%g\n", d_data_p[i]);
  } else {
    ERR.FileA(d_class_name, "dumpData", filename);
  }

  fclose(fp);  
}



//---------------------------------------------------------------------------
// WspectQuark::~WspectQuark()
//---------------------------------------------------------------------------
WspectQuark::~WspectQuark()
{
  VRB.Func(d_class_name, dtor_str);

  if(d_data_mid_point != 0) {
    VRB.Sfree(d_class_name, dtor_str, empty_str, d_data_mid_point);
    sfree(d_data_mid_point);
  }
  
  VRB.Sfree(d_class_name, dtor_str, empty_str, d_data_p);
  sfree(d_data_p);

}

//---------------------------------------------------------------------------
// FermionVector::FermionVector()
//---------------------------------------------------------------------------
FermionVector::FermionVector()
  : d_size(GJP.VolNodeSites() * (COLORs*DIRACs*COMPLEXs))
{
  VRB.Func(d_class_name, ctor_str);

  // allocate memory
  d_fermion_p = (IFloat *)smalloc(d_size * sizeof(IFloat));
  if (!d_fermion_p) 
    ERR.Pointer(d_class_name, ctor_str, empty_str);
  VRB.Smalloc(d_class_name, ctor_str, empty_str, 
	      d_fermion_p, d_size * sizeof(IFloat));
}


//---------------------------------------------------------------------------
// FermionVector::~FermionVector()
//---------------------------------------------------------------------------
FermionVector::~FermionVector()
{
  VRB.Func(d_class_name, dtor_str);
  VRB.Sfree(d_class_name, dtor_str, empty_str, d_fermion_p);
  sfree(d_fermion_p);
}


//---------------------------------------------------------------------------
// void FermionVector::zeroOut() const
//---------------------------------------------------------------------------
void
FermionVector::zeroOut() const
{
  for (int i = 0; i < d_size; ++i) 
    d_fermion_p[i] = 0.0;
}


//---------------------------------------------------------------------------
// FermionVector::print(const char *file)
//---------------------------------------------------------------------------
void FermionVector::print(char *file) const
{
  FILE *fp;
  if (!file || !(fp = Fopen(file, "a"))) 
    ERR.FileA(d_class_name,"print", file);


  int glb[LORENTZs];               // a lattice site on the whole machine
  int s;                           // spinor index = color * dirac * complex 
  IFloat spinor[SPINORs];           // a spinor  

  for (glb[0] = 0; glb[0] < glb_sites[0]; glb[0]++)   {
    for (glb[1] = 0; glb[1] < glb_sites[1]; glb[1]++)   {
      for (glb[2] = 0; glb[2] < glb_sites[2]; glb[2]++)   {
	for (glb[3] = 0; glb[3] < glb_sites[3]; glb[3]++)   {

	  printSite(fp, glb);

	  int lcl[LORENTZs];
	  int is_on_node = glb2lcl(lcl, glb);	  
	  int site_offset = siteOffset(lcl);
	  
	  for (s = 0; s < SPINORs; ++s) {
	    spinor[s] = is_on_node ? d_fermion_p[s+SPINORs*site_offset] : 0.0;
	    glb_sum((Float *)(spinor+s));
	  }

	  printSpinor(fp, spinor);
	}
      }
    }
  }

  fclose(fp);  
}



//---------------------------------------------------------------------------
// void FermionVector::
// setPointSrc(int color, int spin, int src_global_coord[]) const
//---------------------------------------------------------------------------
void FermionVector::setPointSrc(int C, int D, const int *lcl_src) const
{
  char *fname = "setPointSrc";
  VRB.Func(d_class_name, fname);

  // zero the vector
  //-------------------------------------------------------------------------
  zeroOut();

  // set the source
  //-------------------------------------------------------------------------
  if (lcl_src) {
    d_fermion_p[COMPLEXs*(C+COLORs*(D+DIRACs*siteOffset(lcl_src)))] = 1.0;
  }
}



//---------------------------------------------------------------------------
// void FermionVector::setSmearedSrc(...)
//---------------------------------------------------------------------------
void 
FermionVector::setSmearedSrc(int C, int D, const IFloat *src_mat,
			     int dir,
			     const int *lclMin,
			     const int *lclMax) const
{
  char *fname = "setSmearedSrc()";
  VRB.Func(d_class_name, fname);

  // Zero out the entire vector
  //-------------------------------------------------------------------------
  zeroOut();

  // Return if the wall does not go across this node.
  //-------------------------------------------------------------------------
  if (!src_mat)
    return;

  // Set the source  -- walk in 3D -- Note: lclMin[L] = lclMax[L] = lclW
  //-------------------------------------------------------------------------
  int lcl[LORENTZs];                             // local lattice site
  for (lcl[0] = lclMin[0]; lcl[0] <= lclMax[0]; lcl[0]++) {
    for (lcl[1] = lclMin[1]; lcl[1] <= lclMax[1]; lcl[1]++) {	
      for (lcl[2] = lclMin[2]; lcl[2] <= lclMax[2]; lcl[2]++) {
	for (lcl[3] = lclMin[3]; lcl[3] <= lclMax[3]; lcl[3]++) {
	  for (int c = 0; c < COLORs; c++) {
	    int frm_offset = COMPLEXs*(c+COLORs*(D+DIRACs*siteOffset(lcl)));
	    int gau_offset = COMPLEXs*(c+COLORs*(C+COLORs*
						 siteOffset(lcl, dir)));
	    d_fermion_p[frm_offset++] =  src_mat[gau_offset++];    // real
	    d_fermion_p[frm_offset]   = -src_mat[gau_offset];      // imag
	  }
	}
      }
    }
  }
}

CPS_END_NAMESPACE
