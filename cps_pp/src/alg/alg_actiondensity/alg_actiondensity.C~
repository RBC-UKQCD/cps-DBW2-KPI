#include <config.h>
#include <alg/alg_actiondensity.h>
#include <stdio.h>
#include <util/gjp.h>
#include <util/site.h>
#include <util/qcdio.h>
#include <comms/glb.h>
#include <comms/scu.h>
#include <omp.h>
#include <util/time_cps.h>
#include <cassert>
CPS_START_NAMESPACE

/*!
  takes the imaginary part of a matrix
*/
void AlgActionDensity::ZeroReal(Matrix& m)
{
/*  Matrix temp;
  temp.Dagger( m );
  m-=temp;
  m*=0.5;*/

  //Replacing above with below gives a factor of 2 speedup for the entire smartrun:
  for(int i = 0; i < 3; i++) {
    m(i, i).real(0);
  }

  for(int x = 0; x < 2; x++) {
    for(int y = x+1; y < 3; y++) {
      Float a = m(x, y).real();
      Float b = m(x, y).imag();
      Float c = m(y, x).real();
      Float d = m(y, x).imag();
      m(x, y).real(0.5 * (a - c));
      m(x, y).imag(0.5 * (b + d));
      m(y, x).real(0.5 * (c - a));
      m(y, x).imag(0.5 * (b + d));
    }
  }
}

/*!
  Computes (1/2) tr(F_mu_nu F_mu_nu)

  Input should be a set of six matrices giving the field strength
  tensor F_mu_nu in each direction:

  clovers[0]  = F_01
  clovers[1]  = F_02
  clovers[2]  = F_03
  clovers[3]  = F_12
  clovers[4]  = F_13
  clovers[5]  = F_23
  
*/

Complex AlgActionDensity::ActionDensity(Matrix clovers[])
{
  Matrix action;

  action.ZeroMatrix();

  for(int i = 0; i < 6; i++) {
    action.DotMPlus(clovers[i], clovers[i]);
  }

  //Minus sign accounts for the fact that that the input is actual i*F_mu_nu
  return -action.Tr();
}


/*!
  Calculate Clover leaf (1x1 size) SU(3) Matrix 
  Sheikholeslami, Wohlert, NPB259, 572 (1985)  Eq. (2.9)
*/
void AlgActionDensity::CloverLeaf(GaugeField& gf, Matrix& pl,  int* pos, int mu, int nu)
{
   Matrix P0,P1,P2,P3;

   P0.ZeroMatrix();
   P1.ZeroMatrix();
   P2.ZeroMatrix();
   P3.ZeroMatrix();

   // each direction could be {0,1,2,3,4,5,6,7} coresponding to
   // the directions {n_x, n_y, n_z, n_t, -n_x, -n_y, -n_z, -n_t}


   int dirs0[4]={mu,nu, mu+4, nu+4};
   gfPathOrdProdPlus(P0, gf, pos, dirs0, 4);

   int dirs1[4]={nu+4,mu+4, nu, mu};
   gfPathOrdProdPlus(P1, gf, pos, dirs1, 4);

   int dirs2[4]={nu,mu+4, nu+4, mu};
   gfPathOrdProdPlus(P2, gf, pos, dirs2, 4);

   int dirs3[4]={mu,nu+4, mu+4, nu};
   gfPathOrdProdPlus(P3, gf, pos, dirs3, 4);


   
   P0 -=  P1;
   P0 +=  P2;
   P0 -=  P3;
   P0 *= 0.25;
   
   moveMem((Float*) &pl,(Float*) &P0, 18 * sizeof(Float) );

}

void AlgActionDensity::run()
{
  const char fname[] = "run()";
  Lattice& lat( AlgLattice() );  

  static bool initialized = false;
  static Offsets offsets;

  cps::GaugeField gf(lat);
  const int buffer_thickness = 1; //Required expansion in each direction
  gf.resize(buffer_thickness);
  if (!initialized) {
    gf.refresh();
    gf.recordOffsetStart(false, true);
  } else {
    gf.refresh(offsets);
  }

  Float action = 0;  

  const int t_extent = GJP.Sites(3); //Global number of time slices.

  //Action summed over each time slice:
  Float slice_actions[t_extent];
  for(int t = 0; t < t_extent; t++) slice_actions[t] = 0.0;

#pragma omp parallel reduction(+:action)
  {
    //Thread-local sums over time slices, since OpenMP can't automatically
    //reduce arrays.
    Float thread_slice_actions[t_extent];
    for(int t = 0; t < t_extent; t++) thread_slice_actions[t] = 0.0;

#pragma omp for 
    for(int i = 0; i < GJP.VolNodeSites(); ++i)
    {
      int y[4];
      gf.coordinatesFromIndex(y, i);

      int index = 0;
      Matrix clovers[6];
      for(int mu = 0; mu < 3; ++mu)
        for(int nu = mu + 1; nu < 4; ++nu)
        {
          CloverLeaf(gf, clovers[index], y, mu, nu);
          ZeroReal(clovers[index]);
          index++;
        }

      Float a = ActionDensity(clovers).real();
      action += a;

      int t = y[3] + GJP.TnodeSites() * GJP.TnodeCoor(); //global time slice index
      thread_slice_actions[t] += a;
    }

    //Manually reduce the slice actions
#pragma omp critical
    {
      for(int t = 0; t < t_extent; t++) {
        slice_actions[t] += thread_slice_actions[t];
      }
    }
  } //action is automatically reduced

  if (!initialized) {
    offsets = gf.getRecordedOffsets();
    gf.recordOffsetEnd();
    initialized = true;
  }

  //Sum results over all nodes.
  glb_sum(&action);
  QMP_sum_double_array(slice_actions, t_extent);

  Float action_density = action / GJP.VolSites();

  const int slice_sites = GJP.Sites(0) * GJP.Sites(1) * GJP.Sites(2);
  Float slice_densities[t_extent];
  for(int t = 0; t < t_extent; t++) {
    slice_densities[t] = slice_actions[t] / slice_sites;
  }

  //Print out results
  if(common_arg->filename != 0) {
    char *fname = "run()";
    FILE *fp;
    if( (fp = Fopen(common_arg->filename, "a")) == NULL ) {
      ERR.FileA(cname,fname,common_arg->filename);
    }

    //Prints mean value of (1/2)tr(F_mu_nu F_mu_nu), in units of a^4
    Fprintf(fp, "%15e\n", action_density);

    for(int t = 0; t < t_extent; t++) {
      Fprintf(fp, "%15e ", slice_densities[t]);
    }
    Fprintf(fp, "\n");
      
    Fclose(fp);
  }
}


CPS_END_NAMESPACE

