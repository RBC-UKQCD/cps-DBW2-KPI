Dear Chulwoo,

   When Tom modified forthe 4D-even/odd precondition, he had to change several plances, which I am not fully tracking for Noarch.

Now I am modifying for SSE, which I am trying to keep track the modification by #define FOUR_DIM_EVEN_ODD_PRECONDITION, which could be in the util/dwf.h but to make it explicitly clear to you, I put the define in the code. Please grep FOUR_DIM_EVEN_ODD_PRECONDITION to find the different point from the original SSE code.

Hopefully, sometime later before I forgot everything, I could do it for Noarch and, more importantly for parts of code other than dirac (like lattice converter and calling functions for MatiInv etc....).


* NOTE About Wilson SSE (separate from DWF SSE)

1.   Chuwloo, please note, I fix a vital bug in  d_op_wilson/sse/, there is a nasty typo in "2" instead of "1" in one of sse macro's. Please correct this other wise this will produce the wrong results. Also there was BND_COMM preprocessor directive missing for Wilson SSE.

2. There is a redundancy between DWF's sse-dwf_dslash_4.C and Wilson's sse-wilson_dslash.C. This could be merged into one, I guess, but not 100% sure as I didn't check if the two codes are identical. Currently if you compile both SSE codes, there will be duplicate declaration of wilson_dslash_{blk,bnd}_dag{0,1}, which we could avoid by using different name, but do we want to do it ?


* A suggestion for Makefile ?:

  Sometime, for example SSE dirac operator, using intel compiler is useful.
Using the intel compiler only for a directory could be relized by the Makefile in that directory modified like

include ../../../../../Makefile.rules.sse

For this to be easily working, it may be kind to put something like the one generating the following in the Makefile.rules.in (so that we don't have to always remember the intel's optimiztion flags ) :

=================================
#
# Use this and make this into Makefile.rules.sse  for Nehalem chips
#
#ICCOPT=   -g -O2 -xS  -fno-alias  -align -inline-max-total-size=10000 -ip  -i-static 
#CC = /usr/bin/mpicc -cc=icc $(ICCOPT)
#CXX = /usr/bin/mpicxx -cxx=icpc $(ICCOPT)
#CFLAGS =   
#CXXFLAGS =   


CC = /usr/bin/mpicc 
CXX = /usr/bin/mpicxx 
CFLAGS =  -O0 -g -ggdb -Wno-write-strings -msse3
CXXFLAGS =  -O0 -g -ggdb -Wno-write-strings -msse3
================================


Todo: 

- Correct the timing and flops count to reflect the M5inv.

- (unrelated to 4D even/odd)   the zero clear by a = _mm_xor_pd(a,a) seems to be misunderstood by valgrind that this is not initialized. Perhpas making alternative zero clear for valgrind check would be useful.

- (unrelated to 4D even/odd) Do axial gauge

