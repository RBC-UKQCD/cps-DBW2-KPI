#include <config.h>
#include <omp.h>
#include <stdio.h>
#include <stdarg.h>

#ifdef USE_BFM
#include <bfm.h>
#include <bfm_qdp.h>
#ifdef UNIFORM_SEED_TESTING
#include "majority_vote.h"
#endif
#include <chroma.h>
#include <util/gjp.h>
#include <util/error.h>
#include <util/verbose.h>
#include <util/time_cps.h>
#include <util/dirac_op/d_op_dwf.h>

//static int  Printf(char *format,...){}
#define Printf if ( QMP_is_primary_node() ) printf


using namespace Chroma;
USING_NAMESPACE_CPS

static int qdp_initted = 0;
//check if QDP is already present outside cps_qdp
static int qdp_already_initted = 0;

CPS_START_NAMESPACE
int cps_qdp_init(int *argc, char ***argv){
  VRB.Result("","cps_qdp_init()","started");
  if (qdp_initted) return 1;
//  if (Chroma::isInitialized()) {
  if ( qdp_already_initted ) {
    VRB.Result("","cps_qdp_init()","Already started!");
    qdp_initted = 1;
    return 1;
  }
  Chroma::initialize( argc, argv);
  VRB.Result("","cps_qdp_init()","Chroma::initialize( argc, argv)");
  int size[Nd];
  multi1d<int> nrow(Nd);  
  for(int i = 0;i<Nd;i++) nrow[i] = GJP.Sites(i);
//  multi1d<LatticeFermion> test(Nd);  
//  nrow=size;
  Layout::setLattSize(nrow);
  Layout::create();
  for(int i=0;i<Nd;i++){
    VRB.Result("","cps_qdp_init()","Layout::subgridSize()[%d]=%d\n",i,Layout::subgridLattSize()[i]);
  }
  qdp_initted = 1;
  return 1;
}

int cps_qdp_finalize(){
  VRB.Result("","cps_qdp_finalize()","started");
  if (!qdp_initted) {
    ERR.General("","cps_qdp_finalize()","qdp_initted=0!");
  }
// Keep Chroma in scope, as it seems to finalize QMP too!
   qdp_already_initted = 1;
//  if (! qdp_already_initted) Chroma::finalize();
//  else   VRB.Result("","cps_qdp_finalize()","cps_qdp had already started, not finalized here.");
  qdp_initted = 0;
  return 1;
}
CPS_END_NAMESPACE

static int chroma_idx(int x[4],int node_latt[4], int reim,int i_el, int i_size)
{
  int ccb   = ((x[0]+x[1]+x[2]+x[3])&0x1); /*Work out local checkerboard of site*/
                         /*FIXME Here need to worry about base_parity
                          *as chroma indexes with global and not local parity
                          */
  int chroma_cbsite[4];
  chroma_cbsite[0] = x[0];
  chroma_cbsite[1] = x[1];
  chroma_cbsite[2] = x[2];
  chroma_cbsite[3] = x[3];
  for(int i =0;i<4;i++)
  if ( (x[i]<0) || (x[i]>=node_latt[i]) ){
     printf("x[%d]=%d!!\n",i,x[i]);
     exit(-3);
  }



  int csite= x[0] + node_latt[0]*(x[1]
                  +       node_latt[1]*(x[2]
                  +             node_latt[2]*x[3]));
  csite = csite/2;
  int cbvol = (node_latt[0]*node_latt[1]*node_latt[2]*node_latt[3])/2;
  int idx = (ccb*cbvol+csite)*i_size*2 + i_el*2 + reim;

  return idx; 
}

void importGauge(
CPS_NAMESPACE::Lattice &Lat,
multi1d<LatticeColorMatrix> &U,
Float *gauge,
int dag){
#if 1
  int Ncoco = 9;
  QDPdouble *U_p;
  int x[5],node_latt[5];
  char *fname="importGauge";
  for(int i=0;i<5;i++) node_latt[i]=GJP.NodeSites(i);

  for (int mu=0;mu<Nd;mu++){
    U_p = (QDPdouble *)&(U[mu].elem(0).elem());
//    VRB.Result("",fname,"U_p[%d]=%p, U_p[%d][0]=%e\n",mu,U_p,mu,*U_p);
    for ( x[3]=0;x[3]<node_latt[3];x[3]++ ) {
    for ( x[2]=0;x[2]<node_latt[2];x[2]++ ) {
    for ( x[1]=0;x[1]<node_latt[1];x[1]++ ) {
    for ( x[0]=0;x[0]<node_latt[0];x[0]++ ) {
      
        for ( int row=0;row<3;row++ ) 
        for ( int col=0;col<3;col++ ) {
        for ( int reim=0;reim<2;reim++ ) {

          int coco = col+3*row;
          int coco2 = coco;
          if (dag) coco2 = row+3*col;
  
          int cidx = chroma_idx(x,node_latt,reim,coco,Ncoco);
          int bidx = reim + 2 *(coco2 + Ncoco *(Lat.GsiteOffset(x,mu)));
          *(U_p+cidx) = *(gauge+bidx);
  
        }} // reim,coco
  
    }}}} // x
    VRB.Result("",fname,"U_p[%d]=%p, U_p[%d][0]=%e\n",mu,U_p,mu,*U_p);

  }//mu
#endif
}

// import: QDP <- CPS
// export : CPS <- QDP
//  impexFermion(0,Lat,src,src_cps,0,1);
void impexFermion(
int if_export,
CPS_NAMESPACE::Lattice &Lat,
multi1d<LatticeFermion> const &qdp,
Float *cps_p,
int even, int odd, int Ls=0, double fac_t=1.){

  int x[5],node_latt[5];
  char *fname="impexFermion";
  unsigned long vol = 1;
	  static unsigned int called=0;
  static double impex_time=0.;

  impex_time -= dclock();
  for(int i=0;i<5;i++){
	 node_latt[i]=GJP.NodeSites(i);
	if( i<4 ) vol *=node_latt[i];
  }

  if(Ls==0){
	Ls = node_latt[4];
  }
  double  fac = fac_t;

  if (qdp.size() != Ls ) {
    printf("qdp.size()(%d) != node_latt[4](%d)\n",qdp.size(),node_latt[4]);
    exit(-4);
  }

#if 1
  for(x[4]=0;x[4]<Ls;x[4]++){
    QDPdouble *qdp_p = (QDPdouble *) &(qdp[x[4]].elem(0).elem(0).elem(0).real());
#if 0
   omp_set_num_threads(1);
#pragma omp parallel for default(none) shared(vol,node_latt,odd,even,called,qdp_p,Lat,cps_p,fac,if_export) 
    for (unsigned long i=0;i<vol;i++){
 	   unsigned long rest=i;
	   int pos[4];
	   for(int j =0; j<4;j++){
		pos[j]= rest%node_latt[j]; rest = rest/node_latt[j];
	   }
 	if (called==0)
	Printf("impex %d: %d %d %d %d\n",i,pos[0],pos[1],pos[2],pos[3]);
//	   const int tnum = omp_get_thread_num();
#else
    int pos[4];
    for ( pos[3]=0;pos[3]<node_latt[3];pos[3]++ ) 
    for ( pos[2]=0;pos[2]<node_latt[2];pos[2]++ ) 
    for ( pos[1]=0;pos[1]<node_latt[1];pos[1]++ ) 
    for ( pos[0]=0;pos[0]<node_latt[0];pos[0]++ ) {
#endif
      
      for ( int coco=0;coco<12;coco++ ) {
      for ( int reim=0;reim<2;reim++ ) {
  
        int cidx = chroma_idx(pos,node_latt,reim,coco,12);
        int bidx = Lat.FsiteOffsetChkb(pos);
        bidx = reim + 2 *(coco + 12 *bidx);
	if (0)
	if( !if_export)
		{if (bidx==0) Printf("%d %d %d %d %d: cps[0](in)=%g\n",
		pos[0],pos[1],pos[2],pos[3],pos[4], *(cps_p+bidx));}
	else
		{if (cidx==0) Printf("%d %d %d %d %d: qdp[0](in)=%g\n",
		pos[0],pos[1],pos[2],pos[3],pos[4], *(qdp_p+cidx));}
       if( !if_export){ 
	 if(1)
         if ((odd) && ( (pos[0]+pos[1]+pos[2]+pos[3]+pos[4])%2==1) ){
            *(qdp_p+cidx) = *(cps_p+bidx)*fac;
         } else if ((even) && ( (pos[0]+pos[1]+pos[2]+pos[3]+pos[4])%2==0) ){
            *(qdp_p+cidx) = *(cps_p+bidx)*fac;
         } else {
//            *(qdp_p+cidx) = 0.;
         }
       } else {
	 if(1)
         if ((odd) && ( (pos[0]+pos[1]+pos[2]+pos[3]+pos[4])%2==1) ){
            *(cps_p+bidx) = *(qdp_p+cidx)*fac;
         } else if ((even) && ( (pos[0]+pos[1]+pos[2]+pos[3]+pos[4])%2==0) ){
            *(cps_p+bidx) = *(qdp_p+cidx)*fac;
         } else {
//            *(cps_p+bidx) = 0.;
         }
      } 
	if (0)
	if( if_export)
		{if (bidx==0) Printf("%d %d %d %d %d: cps[0]=%g\n",
		pos[0],pos[1],pos[2],pos[3],pos[4], *(cps_p+bidx));}
	else
		{if (cidx==0) Printf("%d %d %d %d %d: qdp[0]=%g\n",
		pos[0],pos[1],pos[2],pos[3],pos[4], *(qdp_p+cidx));}

      }} // reim,coco
  
    } // x
  } // x[4]
#endif

  impex_time += dclock();
  called ++;

  if (called%100==0){
    print_flops(fname,"x100",0,impex_time);
    impex_time=0.;
  }
}

template <class Float>
int dwf_CG_precMdagM_oo_multi( multi2d<LatticeFermion> &sol,
                              multi1d<LatticeFermion> &src,
                              multi1d<LatticeColorMatrix> &U,
//							  std::string output_stem,
                              double    shifts[],
                              double    alpha[],
                              int       nshift,
                              double mresidual[],
                              int single,
                              int Ls,
                              Real mass,
                              Real M5,
                              Real residual, int max_iter);



static int cps_qdp_dwf_invert(
Lattice &Lat, 
Float mass, 
Float *sol_cps, 
Float *src_cps,
double residual,
int max_iter
){
  char *fname = "cps_qdp_dwf_invert()";

  if (GJP.Snodes() != 1)
    ERR.General("",fname,"Snodes()(%d)!=1",GJP.Snodes());

  cps_qdp_init(GJP.argc_p(), GJP.argv_p());
  if (!qdp_initted)
    ERR.General("",fname,"QDP not initialized!(%d)",0);

  int iter=0;   

  int Ls = GJP.SnodeSites();
  double M5 = GJP.DwfHeight();
//  int Nd = 4;

  Printf("src[0]=%g\n",*src_cps);
  int lx = QDP::Layout::subgridLattSize()[0];
  int ly = QDP::Layout::subgridLattSize()[1];
  int lz = QDP::Layout::subgridLattSize()[2];
  int lt = QDP::Layout::subgridLattSize()[3];
  multi1d<LatticeFermion> src_qdp(Ls);

  /********************************************************
   * Setup DWF operator
   ********************************************************
   */
  bfmarg dwfa;
#ifdef UNIFORM_SEED_TESTING
  majorityVote  dwf;
#else
  bfm_qdp<double>  dwf;
#endif

  dwfa.node_latt[0]  = lx;
  dwfa.node_latt[1]  = ly;
  dwfa.node_latt[2]  = lz;
  dwfa.node_latt[3]  = lt;
  dwfa.verbose=1;
  dwfa.reproduce=0;
  bfmarg::Threads(64);
  bfmarg::Reproduce(0);
  bfmarg::ReproduceChecksum(0);
  bfmarg::ReproduceMasterCheck(0);
  bfmarg::Verbose(1);

  static int CGcount = 0;
  CGcount++;
  int test_freq = GJP.CGreprodFreq();
  if (test_freq && (CGcount % test_freq == 0)) {
  dwfa.reproduce=1;
  bfmarg::Reproduce(1);
  }

  multi1d<int> procs = QDP::Layout::logicalSize();
  Printf("%d dim machine\n\t", procs.size());
  for(int mu=0;mu<4;mu++){
    Printf("%d ", procs[mu]);
    if ( procs[mu]>1 ) {
      dwfa.local_comm[mu] = 0;
    } else { 
      dwfa.local_comm[mu] = 1;
    }
  }
  Printf("\nLocal comm = ");
  for(int mu=0;mu<4;mu++){
    Printf("%d ", dwfa.local_comm[mu]);
  }
  Printf("\n");
  
  multi1d<int> ncoor = QDP::Layout::nodeCoord();

//  Real M5(1.8);
//  Real mq(0.1);

  Float *gauge = (Float*) Lat.GaugeField();
  dwfa.precon_5d = 1;
  dwfa.Ls   = Ls;
  dwfa.solver = DWF;
  dwfa.M5   = toDouble(M5);
  dwfa.mass = toDouble(mass);
  dwfa.Csw  = 0.0;
  dwfa.max_iter = max_iter;
  dwfa.residual = residual;
//OK
for(int i = 0;i<1;i++){
  Printf("Initialising bfm operator\n");
  dwf.init(dwfa);

//OK
{
  multi1d<LatticeColorMatrix> U(Nd);
  importGauge(Lat,U,gauge,1);
  dwf.importGauge(U);
}

  Printf("Setup gauge field\n");
  /********************************************************
   * Gaussian source and result vectors
   ********************************************************
   */
//  multi1d<LatticeFermion> source(Ls);
//  for(int s=0;s<Ls;s++) gaussian(source[s]);

  Fermion_t src_bfm = dwf.allocFermion();
//  dwf.master_fill(src_bfm,0.0);
  Printf("src_bfm=%p \n",src_bfm);
  Fermion_t psi[1];
  psi[0] = dwf.allocFermion();
//  dwf.master_fill(psi[0],0.0);
 Printf("psi[0]=%p \n",psi[0]);

  double M5 = GJP.DwfHeight();
  double fac = (5-M5)*(5-M5);

for(int i = 0;i<1;i++){


  /********************************************************
   * Import gauge field to BAGEL
   ********************************************************
   */

  impexFermion(0,Lat,src_qdp,sol_cps,0,1,0,1./fac);
  dwf.importFermion(src_qdp,psi[0],1);
  impexFermion(0,Lat,src_qdp,src_cps,0,1);
  dwf.importFermion(src_qdp,src_bfm,1);
  Float *tmp_p = (Float *)src_bfm;
  Printf("src_bfm[0]=%g\n",*tmp_p);

  Printf("Calling half cb inverter\n"); fflush(stdout);
  dwf.inv_type=CG_PREC_MDAGM;
  dwf.qdp_chi_h[0]=psi[0];
  dwf.qdp_chi_h[1]=psi[0];
  dwf.qdp_psi_h[0]=src_bfm;
  dwf.qdp_psi_h[1]=src_bfm;
  bfm_spawn_cg(dwf);
  iter = dwf.iter;
  tmp_p = (Float *)psi[0];
  Printf("psi[0]=%g\n",*(tmp_p));
  dwf.exportFermion(src_qdp,psi[0],1);
}
  impexFermion(1,Lat,src_qdp,sol_cps,0,1,0,fac);
  Printf("sol[0]=%g\n",*sol_cps);


  Printf("src_bfm=%p freed\n",src_bfm);
  dwf.freeFermion(src_bfm);
  Printf("psi[0]=%p freed\n",psi[0]);
  dwf.freeFermion(psi[0]);
  Printf("Done\n"); 
//OK
  dwf.end();
}
//NOT OK
  cps_qdp_finalize();
  return iter;
}

CPS_START_NAMESPACE
int DiracOpDwf::InvCg(Vector *out,
                   Vector *in,
                   Float *true_res){

   char *fname="InvCg(V*,V*,F*)";
   double cg_time = -dclock();
   Float *sol_cps = (Float*) out;
   Float *src_cps = (Float*) in;
  unsigned int f_size_cb =  GJP.VolNodeSites() * lat.FsiteSize() / (lat.FchkbEvl()+1);
  Float src_norm_sq = in->NormSqNode(f_size_cb);
  DiracOpGlbSum(&src_norm_sq);
  VRB.Flow(cname,fname,"src_norm_sq=%e\n",src_norm_sq);

// Calculate stopping condition
//------------------------------------------------------------------
  Float stp_cnd = src_norm_sq * dirac_arg->stop_rsd * dirac_arg->stop_rsd;
   Float residual = dirac_arg->stop_rsd;
  VRB.Result(cname,fname,
           "stp_cnd =%e\n", IFloat(residual));
  residual = 0.7*residual;
//for(int i =0;i<1;i++) 
   int iter = cps_qdp_dwf_invert(lat,dirac_arg->mass,sol_cps,src_cps,residual,dirac_arg->max_num_iter);
  //------------------------------------------------------------------
  // Done. Finish up and return
  //------------------------------------------------------------------
    // Calculate and set true residual: 
    // true_res = |src - MatPcDagMatPc * sol| / |src|
  {
    Vector *sol = (Vector *) out;
    Vector *src = (Vector *) in;
    Vector *mmp = (Vector *) smalloc(cname,fname,"mmp",f_size_cb * sizeof(Float));
    Vector *res = (Vector *) smalloc(cname,fname,"res",f_size_cb * sizeof(Float));
    MatPcDagMatPc(mmp, sol);
    res->CopyVec(src, f_size_cb);
    res->VecMinusEquVec(mmp, f_size_cb);
    Float res_norm_sq_cur = res->NormSqNode(f_size_cb);
    DiracOpGlbSum(&res_norm_sq_cur);
    Float tmp = res_norm_sq_cur / src_norm_sq;
    tmp = sqrt(tmp);
    if(true_res != 0){
      *true_res = tmp;
    }
    VRB.Result(cname,fname,
  	     "True |res| / |src| = %e, iter = %d\n", IFloat(tmp), iter);

    Printf("mmp =%p\n",mmp);
    sfree(cname,fname,"mmp",mmp);
    Printf("mmp freed\n");
    Printf("res =%p\n",res);
    sfree(cname,fname,"res",res);
    Printf("res freed\n");
  }
	cg_time +=dclock();
	print_flops(cname,fname,0,cg_time);
}

CPS_END_NAMESPACE

#endif
