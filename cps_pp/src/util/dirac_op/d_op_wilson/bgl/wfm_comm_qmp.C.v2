#include <config.h>
#ifdef USE_QMP
#include <comms/sysfunc_cps.h>
#include <util/wilson.h>
#include <util/verbose.h>
#include <util/error.h>
#include <util/gjp.h>
CPS_START_NAMESPACE

/*--------------------------------------------------------------------------*/
/* Externals                                                                */
/*--------------------------------------------------------------------------*/
extern int wfm_max_numchunk;
extern int wfm_numchunk[];
extern IFloat **wfm_send_ad;
extern IFloat **wfm_recv_ad;

static int initted=0;
extern int wilson_initted;

void wfm_comm(){

  char *fname="wfm_comm()";
  const int group = 16;
  void *addr[group];
  size_t blksize[group];
  int  numblk[group];
  ptrdiff_t stride[group];
  int index;

  const int MAX_MSGHANDLE=20;
  if (wfm_max_numchunk/group+1 >MAX_MSGHANDLE)
  ERR.General("",fname,"wfm_max_numchunk(%d)/group+1 >MAX_MSGHANDLE",wfm_max_numchunk);

 static   QMP_msgmem_t send_mem[8][MAX_MSGHANDLE];
 static   QMP_msgmem_t recv_mem[8][MAX_MSGHANDLE];
 static   QMP_msghandle_t send_h[8][MAX_MSGHANDLE];
 static   QMP_msghandle_t recv_h[8][MAX_MSGHANDLE];
 static   int pir=0;

  static int wfm_blocks[8];
if (wilson_initted || !initted){
    VRB.Flow("",fname,"wilson_initted=%d initted=%d\n",wilson_initted,initted);
  for(int dir=0;dir<8;dir++) wfm_blocks[dir]=0;
  for(int ig=0; ig<(wfm_max_numchunk/group+1); ig++){
//    VRB.Flow("",fname,"ig=%d",ig);
    for(int dir=0;dir<8;dir++){
      int sign=1;
      if(dir>3) sign = -1;
//      VRB.Flow("",fname,"dir=%d",dir);
       int n_site=0;
       for(int g=0;g<group;g++){
         int index = ig*group+g;
         if (index <wfm_numchunk[dir]){
           addr[n_site] = wfm_send_ad[dir+8*index];
           Float *tmp_p = wfm_send_ad[dir+8*index];
//           if ( (*tmp_p)*(*tmp_p) >0.0001)
//           printf("Node %d: wfm_send_ad[%d][%d]=%e\n",UniqueID(),dir,index,*tmp_p);
           blksize[n_site] = 12*sizeof(Float);
           numblk[n_site] = 1;
           stride[n_site] = 1;
           n_site++;
         }
       }
       if (initted){
         QMP_free_msghandle(send_h[dir][ig]);
         QMP_free_msghandle(recv_h[dir][ig]);
         QMP_free_msgmem(send_mem[dir][ig]);
         QMP_free_msgmem(recv_mem[dir][ig]);
       }
       if(n_site>0){
         send_mem[dir][ig]  = QMP_declare_strided_array_msgmem(addr,blksize,numblk,stride,n_site);
         send_h[dir][ig] = QMP_declare_send_relative(send_mem[dir][ig],dir%4,sign,0);
         wfm_blocks[dir]=ig+1;
       }

       int r_site=0;
       for(int g=0;g<group;g++){
         int index = ig*group+g;
         if (index <wfm_numchunk[dir]){
           addr[r_site] = wfm_recv_ad[dir+8*index];
           blksize[r_site] = 12*sizeof(Float);
           numblk[r_site] = 1;
           stride[r_site] = 1;
           r_site++;
         }
       }
       if (n_site!=r_site)
         ERR.General("",fname,"n_site(%d)!=r_site(%d)\n",n_site,r_site);
//       VRB.Flow("",fname,"n_site=%d r_site=%d",n_site,r_site);
       if(r_site>0){
         recv_mem[dir][ig]  = QMP_declare_strided_array_msgmem(addr,blksize,numblk,stride,r_site);
         recv_h[dir][ig] = QMP_declare_receive_relative(recv_mem[dir][ig],dir%4,-sign,0);
       }


       for(int g=0;g<r_site;g++){
         int index = ig*group+g;
           Float *tmp_p = wfm_recv_ad[dir+8*index];
//           if ( (*tmp_p)*(*tmp_p) >0.0001)
//           printf("Node %d: wfm_recv_ad[%d][%d]=%e\n",UniqueID(),dir,index,*tmp_p);
       }
    } // dir
  } // ig
  for(int dir=0;dir<8;dir++) 
     VRB.Flow("",fname,"wfm_blocks[%d]=%d",dir,wfm_blocks[dir]);
  pir = CoorT()%2;
  initted=1;
  wilson_initted=0;
} 

   for(int dir=0;dir<8;dir++)
     for ( index=0; index <wfm_numchunk[dir];index++){
           Float *tmp_p = wfm_send_ad[dir+8*index];
           if ( (*tmp_p)*(*tmp_p) >0.0001)
           printf("Node %d: wfm_send_ad[%d][%d]=%e\n",UniqueID(),dir,index,*tmp_p); 
   }

  int dir_g=4;
  for(int ig=0; ig<(wfm_max_numchunk/group+1); ig++){
//    VRB.Flow("",fname,"ig=%d",ig);

    for(int sign=0;sign<2;sign++){
      int index;
      for(int i=0;i<3;i++){
        index = ((sign+pir)%2)*4+i;
        if(wfm_blocks[index]>ig) {
//           VRB.Flow("",fname,"comms dir=%d ig=%d",dir,ig);
           QMP_start(send_h[index][ig]); QMP_start(recv_h[index][ig]);
        }
      }
      index = 3+sign*4;
      if(wfm_blocks[index]>ig) {
           QMP_start(send_h[index][ig]); QMP_start(recv_h[index][ig]);
      }
      for(int i=0;i<3;i++){
        index = ((sign+pir)%2)*4+i;
        if(wfm_blocks[index]>ig) {
           QMP_wait(send_h[index][ig]); QMP_wait(recv_h[index][ig]);
        }
      }
      index = 3+sign*4;
      if(wfm_blocks[index]>ig) {
         QMP_wait(send_h[index][ig]); QMP_wait(recv_h[index][ig]);
      }
    }
  }
   for(int dir=0;dir<8;dir++)
     for ( index=0; index <wfm_numchunk[dir];index++){
           Float *tmp_p = wfm_recv_ad[dir+8*index];
           if ( (*tmp_p)*(*tmp_p) >1e-10)
           printf("Node %d: wfm_recv_ad[%d][%d]=%e\n",UniqueID(),dir,index,*tmp_p); 
   }

  
}

CPS_END_NAMESPACE
#endif
