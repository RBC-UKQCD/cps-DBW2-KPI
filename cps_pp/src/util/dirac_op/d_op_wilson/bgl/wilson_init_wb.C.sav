#include<config.h>
CPS_START_NAMESPACE

/****************************************************************************/
/* 10/6/96                                                                  */
/*                                                                          */
/* wilson_int_wb:                                                           */
/*                                                                          */
/* This routine performs all initializations needed before wilson func      */
/* are called. It sets the addressing related arrays and reserves memory    */
/* for the needed temporary buffers. It only needs to be called             */
/* once at the begining of the program (or after a wilson_end call)         */
/* before any number of calls to wilson funcs are made.                     */
/*                                                                          */
/* In this version the temporary half spinors are allocated regular         */
/* write-back memory.                                                       */
/*                                                                          */
/****************************************************************************/

/*--------------------------------------------------------------------------*/
/* Include header files                                                     */
/*--------------------------------------------------------------------------*/
CPS_END_NAMESPACE
#include<util/wilson.h>
#include<util/gjp.h>
#include<util/smalloc.h>
#include<util/verbose.h>
#include<util/error.h>
CPS_START_NAMESPACE


/*--------------------------------------------------------------------------*/
/* Externals                                                                */
/*--------------------------------------------------------------------------*/
int wfm_max_numchunk;
int wfm_numchunk[8];
IFloat **wfm_send_ad;
IFloat **wfm_recv_ad;

/*--------------------------------------------------------------------------*/
/* Function declarations                                                    */
/*--------------------------------------------------------------------------*/
void wfm_sublatt_pointers(int slx, 
			  int sly, 
			  int slz, 
			  int slt, 
			  int slatt_eo, 
			  Wilson *wilson_p);

/*=========================================================================*/
/* wilson_init:                                                            */
/*=========================================================================*/

void wilson_init(Wilson *wilson_p)  /* pointer to Wilson type structure    */
{
  char *cname = " ";
  char *fname = "wilson_init(Wilson*)";
  VRB.Func(cname,fname);

  int spinor_words;             /* size of the spinor field on the         */
				/* sublattice checkerboard                 */

  int half_spinor_words;        /* size of the spin-projected "half_spinors*/
                                /* on the sublattice checkerboard including*/
                                /* the communications padding              */

  int slx;                          /* x-direction size of node sublattice */
  int sly;                          /* y-direction size of node sublattice */
  int slz;                          /* z-direction size of node sublattice */
  int slt;                          /* t-direction size of node sublattice */
  int slatt_eo;                     /* =0/1 if the sublattice is even/odd. */
  int size;

  int   mu, i, j, k, dir;
  IFloat *send_ad, *receive_ad;


/*--------------------------------------------------------------------------*/
/* Set sublattice direction sizes                                           */
/*--------------------------------------------------------------------------*/
  slx = GJP.XnodeSites();
  sly = GJP.YnodeSites();
  slz = GJP.ZnodeSites();
  slt = GJP.TnodeSites();

/*--------------------------------------------------------------------------*/
/* Determine if the sublattice is even or odd from the node coordinates     */
/* If (px,py,pz,pt) are the coordinates of the node and the node            */
/* mesh is of size (nx,ny,nz,nt) then a node is even/odd if its             */
/* lexicographical number =  px + nx * ( py + ny * ( pz + nz * ( pt )))     */
/* is even/odd.                                                             */
/*--------------------------------------------------------------------------*/
/* A runtime system function is needed here to determine (px,py,pz,pt) and  */
/* (nx,ny,nz,nt). For now we set slat_eo = 0 which is a safe choice if      */
/* slx,sly,slz,slt are all even.                                            */
/* ??? */
  slatt_eo = 0;

/*--------------------------------------------------------------------------*/
/* Reserve memory for the node sublattice pointers                          */
/*--------------------------------------------------------------------------*/
  size = 40*sly*slz*slt*sizeof(int);
  wilson_p->ptr = (int *) smalloc(size);
  if( wilson_p->ptr == 0)
    ERR.Pointer(cname,fname, "ptr");
  VRB.Smalloc(cname,fname,
	      "ptr", wilson_p->ptr, size);

/*--------------------------------------------------------------------------*/
/* Set the node sublattice pointers                                         */
/*--------------------------------------------------------------------------*/
  wfm_sublatt_pointers(slx, sly, slz, slt, slatt_eo, wilson_p);


/*--------------------------------------------------------------------------*/
/* Reserve memory for 2  temporary spinors (nedded by m, mdag and mdagm)    */
/* Memory is allocated into two consecutive chunks. The above routines      */
/* will have to set the pointer of the first temporary to the base          */
/* and of the second in the middle.                                         */
/* WARNING: valid for "even" sublattices only                               */
/*--------------------------------------------------------------------------*/
  spinor_words = 2 * SPINOR_SIZE * wilson_p->vol[0];

  wilson_p->spinor_tmp = (IFloat *) smalloc(spinor_words*sizeof(IFloat));
  if(wilson_p->spinor_tmp == 0)
    ERR.Pointer(cname,fname, "spinor_tmp");
  VRB.Smalloc(cname,fname,
	      "spinor_tmp", wilson_p->spinor_tmp, spinor_words*sizeof(IFloat));
    
/*--------------------------------------------------------------------------*/
/* Reserve memory for the 4 forward and 4 backward spin projected half      */ 
/* spinors.                                                                 */
/*--------------------------------------------------------------------------*/
  for(i=0; i<4; i++){
    half_spinor_words = HALF_SPINOR_SIZE * wilson_p->padded_subgrid_vol[i];

    wilson_p->af[i] = (IFloat *) smalloc(half_spinor_words*sizeof(IFloat));
    if(wilson_p->af[i] == 0)
      ERR.Pointer(cname,fname, "af[i]");
    VRB.Smalloc(cname,fname,
		"af[i]", wilson_p->af[i], half_spinor_words*sizeof(IFloat));

    wilson_p->ab[i] = (IFloat *) smalloc(half_spinor_words*sizeof(IFloat));
    if(wilson_p->ab[i] == 0)
      ERR.Pointer(cname,fname, "ab[i]");
    VRB.Smalloc(cname,fname,
		"ab[i]", wilson_p->ab[i], half_spinor_words*sizeof(IFloat));
  }

/*--------------------------------------------------------------------------*/
/* BGL specific                                                             */
/*--------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------*/
/* Set the total number of chuncks for each direction                       */
/*--------------------------------------------------------------------------*/
  for(mu=0; mu<ND; ++mu){
    wfm_numchunk[mu]   = wilson_p->comm_numblk[mu]*wilson_p->comm_blklen[mu];
    wfm_numchunk[4+mu] = wfm_numchunk[mu];
  }

/*--------------------------------------------------------------------------*/
/* find the maximum numchunk from all 8 dirs.                               */
/*--------------------------------------------------------------------------*/
  wfm_max_numchunk = 0;
  for(dir=0; dir<8; dir++){
    if(wfm_numchunk[dir] > wfm_max_numchunk){
      wfm_max_numchunk = wfm_numchunk[dir];
    }
  }

/*--------------------------------------------------------------------------*/
/* Reserve memory for the send and receive address arrays                   */
/*--------------------------------------------------------------------------*/
  wfm_send_ad = (IFloat **) smalloc(8*wfm_max_numchunk*sizeof(int));
  if(wfm_send_ad == 0)
    ERR.Pointer(cname,fname, "wfm_send_ad");
  VRB.Smalloc(cname,fname,
	      "wfm_send_ad", wfm_send_ad, 8*wfm_max_numchunk*sizeof(int));

  wfm_recv_ad = (IFloat **) smalloc(8*wfm_max_numchunk*sizeof(int));
  if(wfm_recv_ad == 0)
    ERR.Pointer(cname,fname, "wfm_recv_ad");
  VRB.Smalloc(cname,fname,
	      "wfm_recv_ad", wfm_recv_ad, 8*wfm_max_numchunk*sizeof(int));


/*--------------------------------------------------------------------------*/
/* Set the send address for all +directions -> x+,y+,z+,t+                  */
/* Set the recv address for all -directions -> x-,y-,z-,t-                  */
/*--------------------------------------------------------------------------*/
  for(mu=0; mu<ND; ++mu)
    {
      k = 0;
      send_ad = wilson_p->comm_offset[mu] + wilson_p->ab[mu];
      receive_ad = 0 + wilson_p->ab[mu];
      for(i=0; i<wilson_p->comm_numblk[mu]; ++i) { 

	for(j=0; j<wilson_p->comm_blklen[mu]; ++j) {
	  wfm_send_ad[mu+8*k] = send_ad;
	  wfm_recv_ad[mu+8*k] = receive_ad;
	  k = k+1;
	  //sends to +dir (2*mu), receives from - dir (2*mu+1)
	  //getMinusData(receive_ad, send_ad, BLOCK, mu);
	  send_ad    = send_ad    + BLOCK;
	  receive_ad = receive_ad + BLOCK;
	}	 
	send_ad = send_ad + wilson_p->comm_stride[mu] - 1;
	receive_ad = receive_ad + wilson_p->comm_stride[mu] - 1;
      }
    }

/*--------------------------------------------------------------------------*/
/* Set the send address for all -directions -> x-,y-,z-,t-                  */
/* Set the recv address for all +directions -> x+,y+,z+,t+                  */
/*--------------------------------------------------------------------------*/
  for(mu=0; mu<ND; ++mu)
    {
      k = 0;
      receive_ad = wilson_p->comm_offset[mu] + wilson_p->af[mu];
      send_ad = 0 + wilson_p->af[mu];
      for(i=0; i<wilson_p->comm_numblk[mu]; ++i) { 

	for(j=0; j<wilson_p->comm_blklen[mu]; ++j) {
	  wfm_send_ad[4+mu+8*k] = send_ad;
	  wfm_recv_ad[4+mu+8*k] = receive_ad;
	  k = k+1;
	  //sends to -dir (2*mu+1), receives from + dir (2*mu)
	  //getPlusData(receive_ad, send_ad, BLOCK, mu);
	  send_ad    = send_ad    + BLOCK;
	  receive_ad = receive_ad + BLOCK;
	}
	send_ad = send_ad + wilson_p->comm_stride[mu] - 1;
	receive_ad = receive_ad + wilson_p->comm_stride[mu] - 1;
      }
   }

}


CPS_END_NAMESPACE
