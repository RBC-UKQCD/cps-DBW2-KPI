#include<config.h>
CPS_START_NAMESPACE
/*!\file
  \brief  Definitions of functions that perform operations on complex matrices
  and vectors.

  $Id: vector_util.C.old,v 1.1 2008-05-26 01:41:43 chulwoo Exp $
*/
//--------------------------------------------------------------------
//  CVS keywords
//
//  $Author: chulwoo $
//  $Date: 2008-05-26 01:41:43 $
//  $Header: /home/chulwoo/CPS/repo/CVS/cps_only/cps_pp/src/util/vector/noarch/vector_util.C.old,v 1.1 2008-05-26 01:41:43 chulwoo Exp $
//  $Id: vector_util.C.old,v 1.1 2008-05-26 01:41:43 chulwoo Exp $
//  $Name: not supported by cvs2svn $
//  $Locker:  $
//  $Revision: 1.1 $
//  $Source: /home/chulwoo/CPS/repo/CVS/cps_only/cps_pp/src/util/vector/noarch/vector_util.C.old,v $
//  $State: Exp $
//
//--------------------------------------------------------------------
/*------------------------------------------------------------------*/
/*
   For these functions there exists optimized assembly 
   code.
*/
/*------------------------------------------------------------------*/

CPS_END_NAMESPACE
#include <string.h>		/* memcpy */
#include <util/vector.h>
#include <util/time_cps.h>
CPS_START_NAMESPACE


/*!
  \param b The vector to be copied to
  \param a The vector to be copied from.
  \param len The number of bytes to be copied.

   The arrays \a c and \a b must not alias each other.
*/
//---------------------------------------------------------------//
void moveMem(void *b, const void *a, int len) 
{
    memcpy(b, a, len); 
}
void moveFloat(Float *b, const Float *a, int len) 
{
    memcpy(b, a, len*sizeof(Float)); 
}
void moveVec(Float *b, const Float *a, int len) 
{
    memcpy(b, a, len*sizeof(Vector)); 
}

//---------------------------------------------------------------//


//---------------------------------------------------------------//

/*! The 3x3 complex matrices are assumed to be stored in a linear form
  where the real part of the (i,j) element is at array position [6i+2j]
  and the imaginary part of the (i,j) element is at array position [6i+2j+1].
  \param c the product matrix \a ab
  \param a the matrix \a a
  \param b the matrix \a b

  The array \a c must not alias arrays \a a or \a b
*/
void mDotMEqual(IFloat* c, const IFloat* a, const IFloat* b)
{
    *c      = *a      * *b      - *(a+1)  * *(b+1)    +
    	      *(a+2)  * *(b+6)  - *(a+3)  * *(b+7)    +
    	      *(a+4)  * *(b+12) - *(a+5)  * *(b+13);
    *(c+1)  = *a      * *(b+1)  + *(a+1)  * *b        +
    	      *(a+2)  * *(b+7)  + *(a+3)  * *(b+6)    +
    	      *(a+4)  * *(b+13) + *(a+5)  * *(b+12);

    *(c+2)  = *a      * *(b+2)  - *(a+1)  * *(b+3)    +
    	      *(a+2)  * *(b+8)  - *(a+3)  * *(b+9)    +
    	      *(a+4)  * *(b+14) - *(a+5)  * *(b+15);
    *(c+3)  = *a      * *(b+3)  + *(a+1)  * *(b+2)    +
    	      *(a+2)  * *(b+9)  + *(a+3)  * *(b+8)    +
    	      *(a+4)  * *(b+15) + *(a+5)  * *(b+14);

    *(c+4)  = *a      * *(b+4)  - *(a+1)  * *(b+5)    +
    	      *(a+2)  * *(b+10) - *(a+3)  * *(b+11)   +
    	      *(a+4)  * *(b+16) - *(a+5)  * *(b+17);
    *(c+5)  = *a      * *(b+5)  + *(a+1)  * *(b+4)    +
    	      *(a+2)  * *(b+11) + *(a+3)  * *(b+10)   +
    	      *(a+4)  * *(b+17) + *(a+5)  * *(b+16);

    *(c+6)  = *(a+6)  * *b      - *(a+7)  * *(b+1)    +
    	      *(a+8)  * *(b+6)  - *(a+9)  * *(b+7)    +
    	      *(a+10) * *(b+12) - *(a+11) * *(b+13);
    *(c+7)  = *(a+6)  * *(b+1)  + *(a+7)  * *b        +
    	      *(a+8)  * *(b+7)  + *(a+9)  * *(b+6)    +
    	      *(a+10) * *(b+13) + *(a+11) * *(b+12);

    *(c+8)  = *(a+6)  * *(b+2)  - *(a+7)  * *(b+3)    +
    	      *(a+8)  * *(b+8)  - *(a+9)  * *(b+9)    +
    	      *(a+10) * *(b+14) - *(a+11) * *(b+15);
    *(c+9)  = *(a+6)  * *(b+3)  + *(a+7)  * *(b+2)    +
    	      *(a+8)  * *(b+9)  + *(a+9)  * *(b+8)    +
    	      *(a+10) * *(b+15) + *(a+11) * *(b+14);

    *(c+10) = *(a+6)  * *(b+4)  - *(a+7)  * *(b+5)    +
    	      *(a+8)  * *(b+10) - *(a+9)  * *(b+11)   +
    	      *(a+10) * *(b+16) - *(a+11) * *(b+17);
    *(c+11) = *(a+6)  * *(b+5)  + *(a+7)  * *(b+4)    +
    	      *(a+8)  * *(b+11) + *(a+9)  * *(b+10)   +
    	      *(a+10) * *(b+17) + *(a+11) * *(b+16);

    *(c+12) = *(a+12) * *b      - *(a+13) * *(b+1)    +
    	      *(a+14) * *(b+6)  - *(a+15) * *(b+7)    +
    	      *(a+16) * *(b+12) - *(a+17) * *(b+13);
    *(c+13) = *(a+12) * *(b+1)  + *(a+13) * *b        +
    	      *(a+14) * *(b+7)  + *(a+15) * *(b+6)    +
    	      *(a+16) * *(b+13) + *(a+17) * *(b+12);

    *(c+14) = *(a+12) * *(b+2)  - *(a+13) * *(b+3)    +
    	      *(a+14) * *(b+8)  - *(a+15) * *(b+9)    +
    	      *(a+16) * *(b+14) - *(a+17) * *(b+15);
    *(c+15) = *(a+12) * *(b+3)  + *(a+13) * *(b+2)    +
    	      *(a+14) * *(b+9)  + *(a+15) * *(b+8)    +
    	      *(a+16) * *(b+15) + *(a+17) * *(b+14);

    *(c+16) = *(a+12) * *(b+4)  - *(a+13) * *(b+5)    +
    	      *(a+14) * *(b+10) - *(a+15) * *(b+11)   +
    	      *(a+16) * *(b+16) - *(a+17) * *(b+17);
    *(c+17) = *(a+12) * *(b+5)  + *(a+13) * *(b+4)    +
    	      *(a+14) * *(b+11) + *(a+15) * *(b+10)   +
    	      *(a+16) * *(b+17) + *(a+17) * *(b+16);
}


/*! The 3x3 complex matrices are assumed to be stored in a linear form
  where the real part of the (i,j) element is at array position [6i+2j]
  and the imaginary part of the (i,j) element is at array position [6i+2j+1].
  \param c the product matrix <em>c + ab</em>
  \param a the matrix \a a
  \param b the matrix \a b

  The array \a c must not alias arrays \a a or \a b
*/
void mDotMPlus(IFloat* c, const IFloat* a, const IFloat* b)
{
    *c     += *a      * *b      - *(a+1)  * *(b+1)    +
    	      *(a+2)  * *(b+6)  - *(a+3)  * *(b+7)    +
    	      *(a+4)  * *(b+12) - *(a+5)  * *(b+13);
    *(c+1) += *a      * *(b+1)  + *(a+1)  * *b        +
    	      *(a+2)  * *(b+7)  + *(a+3)  * *(b+6)    +
    	      *(a+4)  * *(b+13) + *(a+5)  * *(b+12);

    *(c+2) += *a      * *(b+2)  - *(a+1)  * *(b+3)    +
    	      *(a+2)  * *(b+8)  - *(a+3)  * *(b+9)    +
    	      *(a+4)  * *(b+14) - *(a+5)  * *(b+15);
    *(c+3) += *a      * *(b+3)  + *(a+1)  * *(b+2)    +
    	      *(a+2)  * *(b+9)  + *(a+3)  * *(b+8)    +
    	      *(a+4)  * *(b+15) + *(a+5)  * *(b+14);

    *(c+4) += *a      * *(b+4)  - *(a+1)  * *(b+5)    +
    	      *(a+2)  * *(b+10) - *(a+3)  * *(b+11)   +
    	      *(a+4)  * *(b+16) - *(a+5)  * *(b+17);
    *(c+5) += *a      * *(b+5)  + *(a+1)  * *(b+4)    +
    	      *(a+2)  * *(b+11) + *(a+3)  * *(b+10)   +
    	      *(a+4)  * *(b+17) + *(a+5)  * *(b+16);

    *(c+6) += *(a+6)  * *b      - *(a+7)  * *(b+1)    +
    	      *(a+8)  * *(b+6)  - *(a+9)  * *(b+7)    +
    	      *(a+10) * *(b+12) - *(a+11) * *(b+13);
    *(c+7) += *(a+6)  * *(b+1)  + *(a+7)  * *b        +
    	      *(a+8)  * *(b+7)  + *(a+9)  * *(b+6)    +
    	      *(a+10) * *(b+13) + *(a+11) * *(b+12);

    *(c+8) += *(a+6)  * *(b+2)  - *(a+7)  * *(b+3)    +
    	      *(a+8)  * *(b+8)  - *(a+9)  * *(b+9)    +
    	      *(a+10) * *(b+14) - *(a+11) * *(b+15);
    *(c+9) += *(a+6)  * *(b+3)  + *(a+7)  * *(b+2)    +
    	      *(a+8)  * *(b+9)  + *(a+9)  * *(b+8)    +
    	      *(a+10) * *(b+15) + *(a+11) * *(b+14);

    *(c+10)+= *(a+6)  * *(b+4)  - *(a+7)  * *(b+5)    +
    	      *(a+8)  * *(b+10) - *(a+9)  * *(b+11)   +
    	      *(a+10) * *(b+16) - *(a+11) * *(b+17);
    *(c+11)+= *(a+6)  * *(b+5)  + *(a+7)  * *(b+4)    +
    	      *(a+8)  * *(b+11) + *(a+9)  * *(b+10)   +
    	      *(a+10) * *(b+17) + *(a+11) * *(b+16);

    *(c+12)+= *(a+12) * *b      - *(a+13) * *(b+1)    +
    	      *(a+14) * *(b+6)  - *(a+15) * *(b+7)    +
    	      *(a+16) * *(b+12) - *(a+17) * *(b+13);
    *(c+13)+= *(a+12) * *(b+1)  + *(a+13) * *b        +
    	      *(a+14) * *(b+7)  + *(a+15) * *(b+6)    +
    	      *(a+16) * *(b+13) + *(a+17) * *(b+12);

    *(c+14)+= *(a+12) * *(b+2)  - *(a+13) * *(b+3)    +
    	      *(a+14) * *(b+8)  - *(a+15) * *(b+9)    +
    	      *(a+16) * *(b+14) - *(a+17) * *(b+15);
    *(c+15)+= *(a+12) * *(b+3)  + *(a+13) * *(b+2)    +
    	      *(a+14) * *(b+9)  + *(a+15) * *(b+8)    +
    	      *(a+16) * *(b+15) + *(a+17) * *(b+14);

    *(c+16)+= *(a+12) * *(b+4)  - *(a+13) * *(b+5)    +
    	      *(a+14) * *(b+10) - *(a+15) * *(b+11)   +
    	      *(a+16) * *(b+16) - *(a+17) * *(b+17);
    *(c+17)+= *(a+12) * *(b+5)  + *(a+13) * *(b+4)    +
    	      *(a+14) * *(b+11) + *(a+15) * *(b+10)   +
    	      *(a+16) * *(b+17) + *(a+17) * *(b+16);
}


//---------------------------------------------------------------//

/*! The 3x3 complex matrix is assumed to be stored in a linear form
  where the real part of the (i,j) element is at array position [6i+2j]
  and the imaginary part of the (i,j) element is at array position [6i+2j+1].
  \param y The product vector \a Mx
  \param u The matrix \a M
  \param x The complex 3-vector

  The array \a y must not alias array \a x or \a u
*/
void uDotXEqual(IFloat* y, const IFloat* u, const IFloat* x)
{
    *y     =  *u      * *x     - *(u+1)  * *(x+1) + *(u+2)  * *(x+2)
	    - *(u+3)  * *(x+3) + *(u+4)  * *(x+4) - *(u+5)  * *(x+5);
    *(y+1) =  *u      * *(x+1) + *(u+1)  * *x     + *(u+2)  * *(x+3)
	    + *(u+3)  * *(x+2) + *(u+4)  * *(x+5) + *(u+5)  * *(x+4);
    *(y+2) =  *(u+6)  * *x     - *(u+7)  * *(x+1) + *(u+8)  * *(x+2)
	    - *(u+9)  * *(x+3) + *(u+10) * *(x+4) - *(u+11) * *(x+5);
    *(y+3) =  *(u+6)  * *(x+1) + *(u+7)  * *x     + *(u+8)  * *(x+3)
	    + *(u+9)  * *(x+2) + *(u+10) * *(x+5) + *(u+11) * *(x+4);
    *(y+4) =  *(u+12) * *x     - *(u+13) * *(x+1) + *(u+14) * *(x+2)
	    - *(u+15) * *(x+3) + *(u+16) * *(x+4) - *(u+17) * *(x+5);
    *(y+5) =  *(u+12) * *(x+1) + *(u+13) * *x     + *(u+14) * *(x+3)
	    + *(u+15) * *(x+2) + *(u+16) * *(x+5) + *(u+17) * *(x+4);
}


//---------------------------------------------------------------//
/*!
  If the vectors are real, this function computes the scalar product.
  \param a A vector
  \param b Another vector
  \param len The size of the vectors.
  \return The scalar product of the vectors.
 */
IFloat dotProduct(const IFloat *a, const IFloat *b, int len)
{
    IFloat sum = 0.0;
    for(int i = 0; i < len; ++i) {
    	sum += *a++ * *b++;
    }
    return sum;
}

/*!
  \param a The vector to be multiplied
  \param b The real scalar
  \param len The length of the vectors.
  \post \a a is the multiplied vector.
 */
void vecTimesEquFloat(IFloat *a, IFloat b, int len)
{
    for(int i = 0; i < len; ++i) {
    	*a++ *= b;
    }
}

/*! Multiplication by a real scalar
  \param u The input vector
  \param fb The real scalar
  \param len The number of real numbers in the vectors.
  \post This vector is multiplied by \a fb
*/
void vecEqualsVecTimesEquFloat(IFloat *a, IFloat *b, Float c, int len)
{
  for (int i=0; i<len; i++) {
    *a++ = c * *b++;
  }

}


/*!
  \param a A vector to be added to.
  \param b Another vector.
  \param len The length of the vectors.
  \post \a a is the sum vector.
 */
void vecAddEquVec(IFloat *a, const IFloat *b, int len)
{
    for(int i = 0; i < len; ++i) {
    	*a++ += *b++;
    }
}

/*!
  \param a A vector to be subtracted from.
  \param b Another vector.
  \param len The length of the vectors.
  \post \a a is the difference vector.
 */
void vecMinusEquVec(IFloat *a, const IFloat *b, int len)
{
    for(int i = 0; i < len; ++i) {
    	*a++ -= *b++;
    }
}

/*!
  \param a The resulting vector
  \param b A real scalar
  \param c A vector
  \param d A vector
  \param len The length of the vectors.
 */
void fTimesV1PlusV2(IFloat *a, IFloat b, const IFloat *c,
	const IFloat *d, int len)
{
    for(int i = 0; i < len; ++i) {
    	*a++ = b * *c++ + *d++;
    }
}

/*!
  \param a The resulting vector
  \param b A real scalar
  \param c A vector
  \param d A vector
  \param len The length of the vectors.
 */
void fTimesV1MinusV2(IFloat *a, IFloat b, const IFloat *c,
	const IFloat *d, int len)
{
    for(int i = 0; i < len; ++i) {
    	*a++ = b * *c++ - *d++;
    }
}

/*! The 3x3 complex matrix is assumed to be stored in a linear form
  where the real part of the (i,j) element is at array position [6i+2j]
  and the imaginary part of the (i,j) element is at array position [6i+2j+1].
  \param a The resulting matrix
  \param b A real scalar factor
  \param c A matrix
  \param n This must be 18 in order for this function to do anything meaningful
*/
void oneMinusfTimesMatrix(IFloat *a, IFloat b, const IFloat *c, int n)
{
    IFloat *p = a;
    for(int i = 0; i < n; ++i) {
        *p++ = -b * *c++;
    }
    *a += 1.0;    *(a+8) += 1.0;    *(a+16) += 1.0;
}

/*!
  \param a The resulting negated vector
  \param b A vector
  \param len The length of the vectors.
 */
void vecNegative(IFloat *a, const IFloat *b, int len)
{
    for(int i = 0; i < len; ++i) {
        *a++ = -*b++;
    }
}

/*!
  \param c_r The real part of the scalar product of the vectors.
  \param c_i The imaginary part of the scalar product of the vectors.  
  \param a A complex vector
  \param b Another complex vector
  \param len The length of the vectors
 */
void compDotProduct(IFloat *c_r, IFloat *c_i, 
		    const IFloat *a, const IFloat *b, int len)
{
    *c_r = *c_i = 0.0;
    for(int i = 0; i < len; i += 2, a += 2, b += 2) 
    {
      *c_r += *a * *b     + *(a+1) * *(b+1);   // real part
      *c_i += *a * *(b+1) - *(a+1) * *b;       // imag part
    }
}

/*!
  \param re The real part of the scalar complex factor
  \param im The imaginary part of the scalar complex factor 
  \param a The resulting vector
  \param c A vector
  \param d Another vector
  \param len The length of the vectors
 */
void cTimesV1PlusV2(IFloat *a, IFloat re, IFloat im, const IFloat *c,
	const IFloat *d, int len)
{
    for(int i = 0; i < len; i += 2, c += 2) 
    {
      *a++ = re * *c     - im * *(c+1) + *d++;   // real part
      *a++ = re * *(c+1) + im * *c     + *d++;   // imag part
    }
}/*!
  \param re The real part of the scalar complex factor
  \param im The imaginary part of the scalar complex factor 
  \param a The resulting vector
  \param c A vector
  \param d Another vector
  \param len The length of the vectors
 */

void cTimesV1MinusV2(IFloat *a, IFloat re, IFloat im, const IFloat *c,
	const IFloat *d, int len)
{
    for(int i = 0; i < len; i += 2, c += 2) 
    {
      *a++ = re * *c     - im * *(c+1) - *d++;   // real part
      *a++ = re * *(c+1) + im * *c     - *d++;   // imag part
    }
}

/*! Assign vector to zero.
  \param len The number of real numbers in the vectors.
  \post This vector has the value 0.
*/
void vecZero(IFloat *a, int len) {

  for (int i=0; i<len; i++)
    *a++ = 0.0;

}


CPS_END_NAMESPACE
