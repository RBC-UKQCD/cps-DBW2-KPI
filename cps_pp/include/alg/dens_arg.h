/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _DENS_ARG_H_RPCGEN
#define _DENS_ARG_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE

enum DENS_LIM {
	MAX_DENS_MASSES = 100,
	MAX_DENS_OBS = 100,
};
typedef enum DENS_LIM DENS_LIM;
extern struct vml_enum_map DENS_LIM_map[];

class VML;
class DensArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	int n_src;
	int max_deri;
	int max_save;
	int n_obs;
	int obs[MAX_DENS_OBS];
	PatternType pattern_kind;
	int n_masses;
	Float mass_start;
	Float mass_step;
	Float mass[MAX_DENS_MASSES];
	int max_num_iter;
	Float stop_rsd;
	int src_u_s;
	int src_l_s;
	int snk_u_s;
	int snk_l_s;
	int snk_loop;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_DENS_LIM (VML *, char *instance, DENS_LIM*);
extern  bool_t vml_DensArg (VML *, char *instance, DensArg*);

#else /* K&R C */
extern  bool_t vml_DENS_LIM (VML *, char *instance, DENS_LIM*);
extern  bool_t vml_DensArg (VML *, char *instance, DensArg*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_DENS_ARG_H_RPCGEN */
