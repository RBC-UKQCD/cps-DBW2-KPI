/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _NUC3PT_ARG_H_RPCGEN
#define _NUC3PT_ARG_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE

class VML;
class Nuc3ptArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	char *cname;
	int num_masses;
	Float mass[10];
	CgArg cg;
	int t_source;
	int num_src;
	int source_inc;
	int t_sink;
	int BoxStart;
	int BoxEnd;
	int gauss_N;
	Float gauss_W;
	int x[3];
	Float theta;
	int load_u1_lat;
	Float *u1_gauge_ptr;
	SourceType src_type;
	int DoUnPolarized;
	int DoUnPolarizedMom;
	int DoPolarized;
	int DoPolarizedMom;
	int DoHalfFermion;
	int DoPerPlusAper;
	int MaxMom2;
	int DoSS2ptF;
	int DoGa1Proj;
	int DoConserved;
	int num_mult;
	int mt[5];
	GaussianKernelLinkSmearType gauss_link_smear_type;
	int gauss_link_smear_N;
	Float gauss_link_smear_coeff;
	CalcQpropType calc_QProp;
	CalcSeqType calc_seqQ;
	char *prop_file;
	char *ensemble_label;
	int ensemble_id;
	int StartSrcSpin;
	int EndSrcSpin;
	int StartSrcColor;
	int EndSrcColor;
	   Nuc3ptArg (  ) ;
	   void check_args (  ) ;
	   int NumMasses (  ) ;
	   void NumMasses (  int n ) ;
	   Float Mass (  int m ) ;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_Nuc3ptArg (VML *, char *instance, Nuc3ptArg*);

#else /* K&R C */
extern  bool_t vml_Nuc3ptArg (VML *, char *instance, Nuc3ptArg*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_NUC3PT_ARG_H_RPCGEN */
