/*
 * Please do not edit this file.
 * It was generated using PAB's VML system.
 */

#ifndef _MEAS_ARG_H_RPCGEN
#define _MEAS_ARG_H_RPCGEN

#include <config.h>
#include <util/vml/types.h>
#include <util/vml/vml.h>
#include <util/enum.h>
#include <util/defines.h>
CPS_START_NAMESPACE

enum MeasLimits {
	MAX_MEAS_TASK = 24,
};
typedef enum MeasLimits MeasLimits;
extern struct vml_enum_map MeasLimits_map[];

enum MeasType {
	MeasAlgPlaq = 0,
	MeasAlgPbp = 1,
	MeasAlgWspect = 2,
	MeasAlgEig = 3,
	MeasAlgPot = 4,
	MeasAlgFixGauge = 5,
	MeasAlgFixGaugeFree = 6,
	MeasAlgQPropW = 7,
	MeasAlgNuc3pt = 8,
	MeasAlgRandomGauge = 9,
};
typedef enum MeasType MeasType;
extern struct vml_enum_map MeasType_map[];

enum MeasIOTask {
	MeasIOLoad = 0,
	MeasIOSave = 1,
	MeasIONone = 2,
};
typedef enum MeasIOTask MeasIOTask;
extern struct vml_enum_map MeasIOTask_map[];

class VML;
class MeasTask {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	MeasType Measurement;
	char *ArgFilename;
	char *OutputFilestem;
};

class VML;
class MeasArg {
public:
	 bool Encode(char *filename,char *instance);
	 bool Decode(char *filename,char *instance);
	 bool Vml(VML *vmls,char *instance);
	FclassType Fermion;
	GclassType Gluon;
	char *WorkDirectory;
	char *GaugeStem;
	char *RNGStem;
	MeasIOTask GaugeIO;
	MeasIOTask RNGIO;
	int TrajStart;
	int TrajIncrement;
	int TrajLessThanLimit;
	int TrajCur;
	int HdwXCsum;
	int HdwRCsum;
	int IOconcurrency;
	struct {
		u_int TaskList_len;
		MeasTask *TaskList_val;
	} TaskList;
};

/* the xdr functions */

#ifdef __cplusplus
extern "C" {
#endif

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t vml_MeasLimits (VML *, char *instance, MeasLimits*);
extern  bool_t vml_MeasType (VML *, char *instance, MeasType*);
extern  bool_t vml_MeasIOTask (VML *, char *instance, MeasIOTask*);
extern  bool_t vml_MeasTask (VML *, char *instance, MeasTask*);
extern  bool_t vml_MeasArg (VML *, char *instance, MeasArg*);

#else /* K&R C */
extern  bool_t vml_MeasLimits (VML *, char *instance, MeasLimits*);
extern  bool_t vml_MeasType (VML *, char *instance, MeasType*);
extern  bool_t vml_MeasIOTask (VML *, char *instance, MeasIOTask*);
extern  bool_t vml_MeasTask (VML *, char *instance, MeasTask*);
extern  bool_t vml_MeasArg (VML *, char *instance, MeasArg*);

#endif /* K&R C */

#ifdef __cplusplus
}
#endif
CPS_END_NAMESPACE

#endif /* !_MEAS_ARG_H_RPCGEN */
